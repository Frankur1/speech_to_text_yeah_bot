import os
import asyncio
import mimetypes
import ffmpeg
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from openai import OpenAI
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∂–∞–µ–º .env ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TEMP_DIR = "downloads"

os.makedirs(TEMP_DIR, exist_ok=True)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)

# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ ===
async def extract_audio(input_path: str, output_path: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –ª—é–±–æ–≥–æ —Ñ–∞–π–ª–∞ (–≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç)"""
    try:
        stream = ffmpeg.input(input_path)
        stream = ffmpeg.output(stream, output_path, ac=1, ar=16000)
        ffmpeg.run(stream, overwrite_output=True, quiet=True)
    except ffmpeg.Error as e:
        raise Exception(f"FFmpeg error: {e}")
    return output_path

# === –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ ===
def transcribe_audio(audio_path: str) -> str:
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å —á–µ—Ä–µ–∑ OpenAI Whisper"""
    with open(audio_path, "rb") as audio_file:
        transcription = client.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file,
            response_format="text"
        )
    return transcription

# === GPT —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
async def beautify_text(raw_text: str) -> str:
    prompt = f"""
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä.
–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Ä–µ—á–∏:
---
{raw_text}
---
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –î–æ–±–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ.
2. –†–∞–∑–±–µ–π –Ω–∞ –∞–±–∑–∞—Ü—ã.
3. –ü–æ—Å—Ç–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.
4. –£–¥–∞–ª–∏ —à—É–º–æ–≤—ã–µ —Å–ª–æ–≤–∞.
5. –°–æ—Ö—Ä–∞–Ω–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—á–∏.
"""
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content.strip()

# === GPT –ø–µ—Ä–µ–≤–æ–¥ ===
async def translate_text(text: str, lang: str) -> str:
    lang_name = {"en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "ru": "—Ä—É—Å—Å–∫–∏–π", "hy": "–∞—Ä–º—è–Ω—Å–∫–∏–π"}.get(lang, lang)
    prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ {lang_name} —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—Ç–∏–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n{text}"
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content.strip()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "üé• <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–Ø –ø—Ä–∏–Ω–∏–º–∞—é –ª—é–±—ã–µ –≤–∏–¥–µ–æ üé¨, –∞—É–¥–∏–æ üîä –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã üìÑ ‚Äî "
        "–ø—Ä–µ–≤—Ä–∞—â–∞—é —Ä–µ—á—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –¥–∞–∂–µ –ø–µ—Ä–µ–≤–æ–∂—É üåç"
    )

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ ===
@dp.message()
async def handle_any_file(message: types.Message):
    file = message.video or message.audio or message.voice or message.video_note or message.document
    if not file:
        await message.answer("üìÇ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–ø–∏—Å—å—é.")
        return

    await message.answer("üéß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")

    try:
        # --- –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª ---
        file_info = await bot.get_file(file.file_id)
        file_name = file.file_name if hasattr(file, "file_name") else f"{file.file_unique_id}"
        input_path = f"{TEMP_DIR}/{file_name}"
        await bot.download_file(file_info.file_path, input_path)

        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø ---
        mime, _ = mimetypes.guess_type(input_path)
        output_path = f"{input_path}.wav"

        # --- –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ---
        if mime and mime.startswith("audio"):
            os.rename(input_path, output_path)
        else:
            await extract_audio(input_path, output_path)

        # --- –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç ---
        raw_text = await asyncio.to_thread(transcribe_audio, output_path)
        formatted_text = await beautify_text(raw_text)

        # --- –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ ---
        kb = InlineKeyboardBuilder()
        kb.button(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="translate_ru")
        kb.button(text="üá∫üá∏ English", callback_data="translate_en")
        kb.button(text="üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂", callback_data="translate_hy")

        await message.answer(
            f"üìù <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n{formatted_text}",
            reply_markup=kb.as_markup()
        )

        dp.workflow_data["last_text"] = formatted_text

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n<code>{e}</code>")
    finally:
        for f in [input_path, output_path]:
            if os.path.exists(f):
                os.remove(f)

# === –ü–µ—Ä–µ–≤–æ–¥—ã ===
@dp.callback_query(lambda c: c.data.startswith("translate_"))
async def translate_callback(callback: types.CallbackQuery):
    lang = callback.data.split("_")[1]
    text = dp.workflow_data.get("last_text", "")
    if not text:
        await callback.answer("–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        return
    translated = await translate_text(text, lang)
    await callback.message.answer(f"üåç <b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n\n{translated}")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
